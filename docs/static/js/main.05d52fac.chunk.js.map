{"version":3,"sources":["pen.svg","URL.js","api.js","components/DrawingForm.jsx","components/NavBar.jsx","components/DrawingList.jsx","components/Drawing.jsx","Reducer/authReducer.js","Reducer/drawingReducer.js","Reducer/index.js","Reducer/store.js","components/Auth.jsx","components/HomePage.jsx","components/DashBoard.jsx","db.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","URL","_key","console","log","atob","localStorage","getItem","socket","openSocket","subscribeForDrawingsList","cb","on","drawing","emit","key","createDrawing","a","async","name","publishLine","line","Component","NavBar","title","btn","color","style","background","className","map","e","DrawingList","props","state","drawings","temp","redirect","query","isNew","isAuth","status","setState","prev","axios","post","then","list","data","success","getAllList","id","deleteDrawing","k","_id","this","to","onClick","alert","Date","timestamp","toLocaleString","drawingList","DrawingElement","prompt","Promise","res","rej","type","placeholder","value","onChange","target","filter","d","toLowerCase","indexOf","length","Drawing","table","handleDraw","drawingId","lines","info","brushColor","isFound","window","location","href","split","pop","document","lineEvt","Rx","Observable","fromEventPattern","h","off","bufferTime","subscribe","subscribeForPublishLine","onDraw","drawingEnabled","initalState","authReducer","action","initState","drawingReducer","combineReducers","auth","store","createStore","rootReducer","applyMiddleware","thunk","Auth","email","password","setItem","btoa","message","width","maxWidth","padding","margin","onSubmit","preventDefault","src","pen","alt","height","required","autoFocus","HomePage","useState","l","setL","DashBoard","React","TITLE","App","selectDrawing","selectedDrawing","db","getState","exact","path","render","match","params","Boolean","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.05d52fac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pen.d2648682.svg\";","// const URL = \"https://chitraBackend.gultion.repl.co\";\r\nconst URL = \"http://localhost:3001\"\r\n\r\nexport default URL;\r\n","import openSocket from \"socket.io-client\";\r\nimport Rx from \"rxjs/Rx\";\r\nimport URL from \"./URL\";\r\nimport axios from \"axios\";\r\n\r\nconst { log } = console;\r\nconst _key = atob(localStorage.getItem(\"id\"));\r\nconst socket = openSocket(URL);\r\n\r\n// const subscribeForDrawings = (cb) => {\r\n\r\n//     socket.on(`drawing:${_key}`, drawing => cb(drawing));\r\n//     socket.emit('subscribeForDrawings',{key:_key});\r\n// }\r\n\r\nconst subscribeForDrawingsList = (cb) => {\r\n  socket.on(\"drawingList\", (drawing) => cb(drawing));\r\n  socket.emit(\"subscribeForDrawingList\", { key: _key });\r\n};\r\n\r\nconst createDrawing =async ({ name, key }) => {\r\n  await socket.emit(\"createDrawing\", { name, key: key });\r\n};\r\n\r\nconst publishLine = (line) => {\r\n  socket.emit(\"publishLine\", line);\r\n};\r\n\r\nconst subscribeForPublishLine = (drawingId, cb) => {\r\n  const lineStream = Rx.Observable.fromEventPattern(\r\n    (h) => socket.on(`drawing:${drawingId}`, h),\r\n    (h) => socket.off(`drawing:${drawingId}`, h)\r\n  );\r\n\r\n  const bufferedTimeStream = lineStream\r\n    .bufferTime(100)\r\n    .map((lines) => ({ lines }));\r\n  bufferedTimeStream.subscribe((lineEvt) => cb(lineEvt));\r\n  // socket.on(`drawing:${drawingId}`, (list)=>cb({lines:[list]}))\r\n\r\n  socket.emit(\"subscribeForPublishLine\", drawingId);\r\n};\r\n\r\nconst subscribeForAllPublishLine = (drawingId, cb) => {\r\n  const lineStream = Rx.Observable.fromEventPattern(\r\n    (h) => socket.on(`drawingAll:${drawingId}`, h),\r\n    (h) => socket.off(`drawingAll:${drawingId}`, h)\r\n  );\r\n\r\n  const bufferedTimeStream = lineStream\r\n    .bufferTime(100)\r\n    .map((lines) => ({ lines }));\r\n  bufferedTimeStream.subscribe((lineEvt) => cb(lineEvt));\r\n  // socket.on(`drawing:${drawingId}`, (list)=>cb({lines:[list]}))\r\n\r\n  socket.emit(\"subscribeForAllPublishLine\", drawingId);\r\n};\r\n\r\nconst getDrawingById = (id, cb) => {\r\n  socket.on(\"takeDrawing\", (info) => cb(info));\r\n  socket.emit(\"getDrawingById\", id);\r\n};\r\n\r\nconst deleteDrawing = (id, cb) => {\r\n  axios.post(URL + \"/drawing/delete\", { id, key: _key }).then((e) => {\r\n    // log(e);\r\n    cb(e);\r\n  });\r\n};\r\n\r\nexport {\r\n  // subscribeForDrawings,\r\n  createDrawing,\r\n  publishLine,\r\n  subscribeForPublishLine,\r\n  getDrawingById,\r\n  subscribeForDrawingsList,\r\n  subscribeForAllPublishLine,\r\n  deleteDrawing\r\n};\r\n","import React, {Component} from 'react'\r\nimport {createDrawing} from \"../api\"\r\nimport NewAdd from \"../NewAdd\"\r\n\r\nexport default class DrawingForm extends Component {\r\n    state = {\r\n        name: \"\",\r\n        isNew:false,\r\n        submitButtonTitle:\"NEW\"\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let id = localStorage.getItem(\"id\");\r\n        createDrawing({name: this.state.name, key:atob(id)});\r\n        this.setState({name: \"\"})\r\n    }\r\n    render() {\r\n        return (\r\n         \r\n            <div className=\"DrawingForm\">\r\n                <div className=\"form\">\r\n                    <input\r\n                        value={this.state.name}\r\n                        type=\"text\"\r\n                        placeholder=\"Search Drawing\"\r\n                        onChange={evt => this.setState({name: evt.target.value})}/>\r\n                    {/* <input type=\"submit\" value={this.state.submitButtonTitle} onClick={e=>{\r\n                        this.setState({\r\n                            submitButtonTitle:!this.state.isNew?\"CANCEL\":\"NEW\",\r\n                            isNew:!this.state.isNew\r\n                        })\r\n                    }}/> */}\r\n                    </div>\r\n                {/* {this.state.isNew?<NewAdd save={()=>this.setState({isNew:false, submitButtonTitle:!this.state.isNew?\"CANCEL\":\"NEW\",})}/>:null} */}\r\n            </div>\r\n        \r\n        )\r\n    }\r\n}\r\n","import { Link } from \"react-router-dom\";\r\nimport React from \"react\";\r\nconst NavBar = ({ title, btn, color }) => {\r\n  return (\r\n    <div\r\n      style={{ background: color && \"none\" }}\r\n      className=\"NavBar d-flex align-items-center justify-content-around p-1\"\r\n    >\r\n      <h1 className=\"text-light display-3 float-left\">{title}</h1>\r\n      <div className=\"d-flex align-items-center justify-content-around p-1\">\r\n      {btn?.map((e) => {\r\n        return e;\r\n      })}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component,useState } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport NavBar from \"./NavBar\"\r\nimport {\r\n  subscribeForDrawings,\r\n  subscribeForDrawingsList,\r\n  createDrawing,\r\n  deleteDrawing\r\n} from \"../api\";\r\nimport axios from \"axios\";\r\nimport URL from \"../URL\";\r\nimport \"./core.css\";\r\n\r\nconst { log } = console;\r\nexport default class DrawingList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      drawings: [],\r\n      temp: [],\r\n      key: \"\",\r\n      redirect: false,\r\n      query: \"\",\r\n      name: \"\",\r\n      isNew: false,\r\n      isAuth: true,\r\n      status:\"Loading ...\"\r\n    };\r\n  }\r\n\r\n  getDrawing() {\r\n    subscribeForDrawingsList((drawing) => {\r\n      log('getDrawing is running');\r\n      this.setState((prev) => ({ drawings: drawing, temp: drawing ,status:\"No Drawing Found !\"}));\r\n    });\r\n\r\n  }\r\n  getAllList(){\r\n    axios.post(`${URL}/drawing/all`).then(e=>{\r\n      log(e)\r\n      const {data:{list}} = e\r\n      this.setState((prev) => ({ drawings: list, temp: list ,status:\"No Drawing Found !\"}));\r\n    })\r\n  }\r\n\r\n  \r\n\r\n  componentDidMount() {\r\n    \r\n   \r\n\r\n    // subscribeForDrawings((drawing) => {     log('drawing is added') log(drawing)\r\n    //    if(drawing.operationType==\"insert\"){ this.setState(prev => ({\r\n    // drawings: [drawing.fullDocument, ...prev.drawings]     }))     }\r\n    // if(drawing.operationType==\"delete\"){    this.setState(prev => ({\r\n    // drawings: prev.drawings.filter(e=>e._id!==drawing.documentKey._id)\r\n    // }))     } });\r\n  }\r\n  componentWillMount(){\r\n    axios\r\n    .post(`${URL}/auth/check`, { key: atob(localStorage.getItem(\"id\")) })\r\n    .then((e) => {\r\n      const { data } = e;\r\n      if (data.success) {\r\n        this.getAllList();\r\n        \r\n      } else {\r\n        this.setState({ isAuth: false });\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteDrawing({id}){\r\n    deleteDrawing(id, (k) => {\r\n      log(k);\r\n      this.getAllList();\r\n    })\r\n  }\r\n  DrawingElement({drawing}){\r\n    // const [show, setShow] = useState(true)\r\n    return <div\r\n          className=\"drawingCard card m-1 w-auto shadow-sm \"\r\n          key={drawing._id}\r\n          \r\n        >\r\n          {this.state.redirect && <Redirect to=\"/auth\" />}\r\n          <div className=\"card-body \">\r\n            <h5 className=\"card-title\">{drawing.name}</h5>\r\n            <Link\r\n              className=\"card-text btn btn-info text-light\"\r\n              to={`/drawings/${drawing._id}`}\r\n            >\r\n              {\"Draw\"}\r\n            </Link>\r\n            <button\r\n              onClick={(e) =>\r\n                this.deleteDrawing({id:drawing._id})\r\n              }\r\n              className=\"btn btn-danger mx-1\"\r\n            >\r\n              DELETE\r\n            </button>\r\n          </div>\r\n          <h6 className=\"card-footer text-dimmed\" onClick={()=>alert(drawing.key)}>\r\n           show key\r\n          </h6>\r\n          <h6 className=\"card-footer text-dimmed\">\r\n            {new Date(drawing.timestamp).toLocaleString()}\r\n          </h6>\r\n        </div>\r\n  }\r\n\r\n  render() {\r\n    const drawingList = this.state.temp.map((drawing) => (\r\n      this.DrawingElement({drawing, getAllList:this.getAllList})\r\n    ));\r\n    \r\n    return (\r\n      <>\r\n      {NavBar({title:\"DashBoard\", btn:[\r\n          <Link to=\"/\" className=\"btn\">{\"< Back\"}</Link>,\r\n          <div className={\"btn\"} onClick={async ()=>{\r\n            let name = prompt(\"Enter the Drawing Name: \");\r\n            let key = prompt(\"Enter the Drawing Name (leave blank for public): \");\r\n            await new Promise((res,rej)=>{\r\n              createDrawing({name,key});\r\n              res()\r\n            })\r\n            await this.getAllList();\r\n          }}>\r\n            + NEW\r\n        \r\n          </div>\r\n        ], color:true})}\r\n      <div>\r\n        {this.state.isAuth ? null : <Redirect to=\"/auth\" />}\r\n        \r\n\r\n        {/* {this.state.isNew && (\r\n          <div className=\"row m-1\">\r\n            <div className=\"col\">\r\n              <div className=\"form-floating\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"floatingInputGrid\"\r\n                  placeholder=\"NAME\"\r\n                  value={this.state.name}\r\n                  onChange={(e) => {\r\n                    const { value } = e.target;\r\n                    this.setState({ name: value });\r\n                  }}\r\n                />\r\n                <label for=\"floatingInputGrid\">New Drawing Name</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )} */}\r\n\r\n          <div className=\"container mb-2 form\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"floatingInputGrid\"\r\n                placeholder=\"Search\"\r\n                value={this.state.query}\r\n                onChange={(e) => {\r\n                  const { value } = e.target;\r\n                  this.setState({\r\n                    query: value,\r\n                    temp: this.state.drawings.filter(\r\n                      (d) => d.name.toLowerCase().indexOf(value) != -1\r\n                    )\r\n                  });\r\n                }}\r\n              />\r\n   \r\n            </div>\r\n\r\n        <div className=\"d-flex flex-wrap container justify-content-center\">\r\n\r\n          {drawingList.length ? drawingList : <h1>{this.state.status}</h1>}\r\n        </div>\r\n      </div></>\r\n    );\r\n  }\r\n}\r\n\r\n","import React, {Component,useState} from 'react'\r\nimport Canvas from 'simple-react-canvas';\r\nimport {publishLine,subscribeForPublishLine,getDrawingById,subscribeForAllPublishLine} from \"../api\"\r\nimport {Link} from \"react-router-dom\"\r\nimport axios from \"axios\"\r\nimport URL from \"../URL\"\r\n\r\nimport \"./core.css\"\r\n\r\nimport NavBar from \"./NavBar\"\r\n\r\n\r\nconst {log, table} = console\r\nexport default class Drawing extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            lines:[],\r\n            info:{name:\"\"},\r\n            brushColor:\"black\",\r\n            name:\"Loading....\",\r\n            isFound:false\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        \r\n        // log(this.props)\r\n        const id = window.location.href.split(\"/\").pop()\r\n        log(id)\r\n        axios.post(`${URL}/drawing/get`, {id}).then(e=>{\r\n            const {data} = e;\r\n            log(data)\r\n            if(data.success){\r\n                this.setState({isFound:true,name:data.name});\r\n                // log(data)\r\n                document.title = `${data.name} - Chitr`\r\n            }else{\r\n                this.setState({name:\"NOT FOUND\"})\r\n            }\r\n        })\r\n\r\n        subscribeForAllPublishLine(this.props.drawingId, (lineEvt)=>{\r\n            // log(lineEvt)\r\n            this.setState(prev=>{\r\n                return {lines:[...prev.lines, ...lineEvt.lines]}\r\n            })\r\n        })\r\n\r\n        subscribeForPublishLine(this.props.drawingId, (lineEvt)=>{\r\n            \r\n            this.setState(prev=>{\r\n                return {lines:[...prev.lines, ...lineEvt.lines]}\r\n            })\r\n        })\r\n\r\n        \r\n\r\n\r\n\r\n    }\r\n   \r\n    handleDraw = (line) => {\r\n        // log(line)\r\n        publishLine({drawingId: this.props.drawingId, ...line});\r\n    }\r\n    \r\n    render() {\r\n\r\n        return (<>\r\n                {/* <h1>{this.state.name}</h1> */}\r\n                {NavBar({\r\n                    title:this.state.name,\r\n                    btn:[<Link to=\"/dashboard\" className=\"btn\">\r\n                    dashBoard\r\n                  </Link>]\r\n                })}\r\n             {this.state.isFound?<div className=\"Drawing\">\r\n                \r\n                    {/* <ColorBox onClick={color=>{this.setState({brushColor:color})}}/> */}\r\n                    <Canvas brushColor={this.state.brushColor} onDraw={this.handleDraw} drawingEnabled={true} lines={this.state.lines}/>\r\n                </div>:null}\r\n                </>\r\n                \r\n            )\r\n         \r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// Canvas.defaultProps = {\r\n//     brushColor: '#000000',\r\n//     lineWidth: 2,\r\n//     canvasStyle: {\r\n//       backgroundColor: '#FFFFFF',\r\n//       cursor: 'pointer'\r\n//     },\r\n//     drawingEnabled: false,\r\n//     lines: []\r\n//   };\r\n\r\n","const initalState = {\r\n    key:\"\"\r\n}\r\nconst authReducer = (state = initalState, action) => {\r\n\r\n    switch (action.type) {\r\n      \r\n      default: return state;\r\n    }\r\n\r\n}\r\n\r\n  export default authReducer","import {subscribeForDrawings,subscribeForDrawingsList} from \"../api\"\r\n\r\nconst {log} = console\r\n\r\nconst initState = {\r\n    list:[]\r\n\r\n}\r\n\r\nconst drawingListGetter = (state, action)=>{\r\n    \r\n}\r\n\r\nconst drawingReducer = (state=initState, action)=>{\r\n    const {data} = action;\r\n    switch(action.type){\r\n        case 'GET_DRAWING_LIST':\r\n            return new Promise((res, rej)=>{\r\n                subscribeForDrawingsList((drawing) => {\r\n                    log('GET_DRAWING_LIST '+drawing.length);\r\n                    log(state.list)\r\n                   res( {...state, list:drawing})\r\n                    \r\n                })\r\n            })\r\n        break;\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default drawingReducer","import {combineReducers} from \"redux\"\r\nimport auth from \"./authReducer\"\r\nimport drawing from \"./drawingReducer\"\r\n\r\nexport default combineReducers({auth,drawing})","import {createStore,applyMiddleware} from \"redux\"\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from \"./index\"\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(thunk)\r\n  );\r\n\r\nexport default store;","import React, { Component } from \"react\";\r\nimport pen from \"../pen.svg\";\r\nimport axios from \"axios\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport URL from \"../URL\";\r\nimport NavBar from \"./NavBar\";\r\nimport \"./core.css\";\r\nimport store from \"./store\";\r\n\r\nconst {log} = console\r\n\r\nexport default class Auth extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      success: false\r\n    };\r\n  }\r\n  auth(type) {\r\n    // type : ['signin', 'signup']\r\n    const { email, password } = this.state;\r\n    axios.post(`${URL}/auth/${type}`, { email, password }).then((e) => {\r\n      const { data } = e;\r\n      if (data.success) {\r\n        localStorage.setItem(\"id\", btoa(data.id))\r\n        this.setState({ success: true });\r\n        // window.location.pathname = '/dashboard'\r\n        // console.log(data)\r\n      } else {\r\n        alert(data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Auth h-100\">\r\n        {NavBar({ title: \"Auth Page\", btn: [], color: true })}\r\n        <div className=\"container-fluid d-flex align-items-center\">\r\n          {this.state.success && <Redirect to=\"/dashboard\" />}\r\n          <form\r\n            className=\"from\"\r\n            style={{\r\n              width: \"100%\",\r\n              maxWidth: \"330px\",\r\n              padding: \"15px\",\r\n              margin: \"auto\"\r\n            }}\r\n            onSubmit={(e) => e.preventDefault()}\r\n          >\r\n            <img className=\"mb-4\" src={pen} alt=\"\" width=\"72\" height=\"72\" />\r\n            <h1 className=\"h3 mb-3 font-weight-normal text-light\">\r\n              Please sign in/up\r\n            </h1>\r\n\r\n            <input\r\n              onChange={(e) => this.setState({ email: e.target.value })}\r\n              value={this.state.email}\r\n              name=\"email\"\r\n              type=\"email\"\r\n              id=\"inputEmail\"\r\n              className=\"form-control mb-2\"\r\n              placeholder=\"Email address\"\r\n              required\r\n              autoFocus\r\n            />\r\n\r\n            <input\r\n              onChange={(e) => this.setState({ password: e.target.value })}\r\n              value={this.state.password}\r\n              name=\"password\"\r\n              type=\"password\"\r\n              id=\"inputPassword\"\r\n              className=\"form-control\"\r\n              placeholder=\"Password\"\r\n              required\r\n            />\r\n\r\n            <button\r\n              onClick={(e) => this.auth(\"signin\")}\r\n              className=\"btn btn-lg btn-primary btn-block mt-2 ms-2 text-light\"\r\n              type=\"submit\"\r\n            >\r\n              Sign in\r\n            </button>\r\n\r\n            <button\r\n              onClick={(e) => this.auth(\"signup\")}\r\n              className=\"btn btn-lg btn-info btn-block mt-2 ms-2 text-light\"\r\n              type=\"submit\"\r\n            >\r\n              Sign up\r\n            </button>\r\n            {/* <p classNameName=\"mt-5 mb-3 text-muted\">© 2017-2018</p> */}\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { Link } from \"react-router-dom\";\r\nimport React,{useState} from \"react\";\r\nimport NavBar from \"./NavBar\";\r\nimport axios from \"axios\"\r\nimport URL from \"../URL\"\r\n\r\nconst HomePage = () => {\r\n  const [l,setL] = useState(false)\r\n  axios\r\n  .post(`${URL}/auth/check`, { key: atob(localStorage.getItem(\"id\")) })\r\n  .then((e) => {\r\n    const { data } = e;\r\n    if (data.success) {\r\n      setL(true)\r\n      \r\n    } else {\r\n      setL(false)\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className={\"HomePage\"}>\r\n      {NavBar({\r\n        title: \"Chitr\",\r\n        btn: [\r\n          !l?<Link to=\"auth\" className=\"btn\">\r\n            Log In\r\n          </Link>:<button className=\"btn\" onClick={()=>{localStorage.setItem(\"id\",\"\");setL(false)}}>Log Out</button>,\r\n          l&&<Link to=\"dashboard\" className=\"btn\">\r\n          dashBoard\r\n        </Link>\r\n        ]\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport DrawingList from \"./DrawingList\";\r\nimport \"./core.css\";\r\nimport NavBar from \"./NavBar\"\r\n\r\nimport {Link} from \"react-router-dom\"\r\n\r\nclass DashBoard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"DashBoard container-fluid\">\r\n        \r\n        <DrawingList\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DashBoard;\r\n","export default {\r\n    TITLE:\"LineDraw\"\r\n}","import React from \"react\";\r\n\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport DrawingForm from \"./components/DrawingForm\";\r\nimport DrawingList from \"./components/DrawingList\";\r\nimport Drawing from \"./components/Drawing\";\r\nimport Auth from \"./components/Auth\";\r\n\r\nimport HomePage from \"./components/HomePage\";\r\nimport DashBoard from \"./components/DashBoard\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport store from \"./Reducer/store\";\r\n\r\nimport db from \"./db\";\r\n\r\nconst { log } = console;\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedDrawing: { id: \"\", name: \"\" },\r\n      title: db.TITLE\r\n    };\r\n  }\r\n  componentWillMount() {\r\n    this.setState({ title: db.TITLE });\r\n    log(store.getState());\r\n  }\r\n\r\n  selectDrawing = (drawing) => {\r\n    this.setState({ selectedDrawing: drawing });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <HomePage />\r\n            </Route>\r\n            <Route path=\"/dashboard\">\r\n              <DashBoard />\r\n            </Route>\r\n            <Route path=\"/auth\">\r\n              <Auth />\r\n            </Route>\r\n\r\n            <Route\r\n              path=\"/drawings/:drawingId\"\r\n              render={(e) => {\r\n                return (\r\n                  <>\r\n                    {/* <h1>{this.state.selectedDrawing.name}</h1> */}\r\n                    <Drawing\r\n                      drawingId={e.match.params.drawingId}\r\n                      drawing={this.state.selectedDrawing}\r\n                    />\r\n                  </>\r\n                );\r\n              }}\r\n            ></Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./bootstrap.min.css\"\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}