{"version":3,"sources":["pen.svg","URL.js","api.js","NewAdd.jsx","components/DrawingForm.jsx","components/DrawingList.jsx","components/Drawing.jsx","Reducer/authReducer.js","Reducer/drawingReducer.js","Reducer/index.js","Reducer/store.js","components/Auth.jsx","db.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","URL","_key","console","log","atob","localStorage","getItem","socket","openSocket","subscribeForDrawingsList","cb","on","drawing","emit","key","createDrawing","name","publishLine","line","NewAdd","props","useState","isPublic","setPublic","setKey","setName","className","id","onChange","e","target","value","text","map","onClick","preventDefault","save","type","placeholder","Component","DrawingList","state","drawings","temp","redirect","query","isNew","isAuth","setState","prev","this","getDrawing","axios","post","then","data","success","drawingList","_id","evt","onSelectDrawing","to","Date","timestamp","toLocaleString","filter","d","toLowerCase","indexOf","for","length","Drawing","table","handleDraw","drawingId","lines","info","brushColor","isFound","window","location","href","split","pop","lineEvt","Rx","Observable","fromEventPattern","h","off","bufferTime","subscribe","subscribeForPublishLine","onDraw","drawingEnabled","initalState","authReducer","action","initState","list","drawingReducer","Promise","res","rej","combineReducers","auth","store","createStore","rootReducer","applyMiddleware","thunk","Auth","email","password","setItem","btoa","pathname","alert","message","style","width","maxWidth","padding","margin","onSubmit","src","pen","alt","height","required","autoFocus","TITLE","App","selectDrawing","selectedDrawing","title","db","getState","exact","path","render","match","params","React","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bcc1d972.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pen.5d33362d.svg\";","const URL = \"https://chitraBackend.gultion.repl.co/\"\r\n\r\nexport default URL","import openSocket from \"socket.io-client\";\nimport Rx from 'rxjs/Rx';\nimport URL from \"./URL\"\n\n\nconst {log} = console;\nconst _key = atob(localStorage.getItem('id'))\nconst socket = openSocket(URL);\n\n// const subscribeForDrawings = (cb) => {\n\n//     socket.on(`drawing:${_key}`, drawing => cb(drawing));\n//     socket.emit('subscribeForDrawings',{key:_key});\n// }\n\nconst subscribeForDrawingsList = (cb) =>{\n  socket.on('drawingList', drawing => cb(drawing));\n  socket.emit(\"subscribeForDrawingList\", {key:_key})\n}\n\nconst createDrawing = ({name,key}) => {\n    socket.emit('createDrawing', {name,key:_key})\n}\n\nconst publishLine=(line)=>{\n  socket.emit('publishLine', line)\n}\n\nconst subscribeForPublishLine = (drawingId, cb)=>{\n  const lineStream = Rx.Observable.fromEventPattern(\n    h=>socket.on(`drawing:${drawingId}`, h),\n    h=>socket.off(`drawing:${drawingId}`, h)\n  );\n\n  const bufferedTimeStream = lineStream.bufferTime(100).map(lines=>({lines}))\n  bufferedTimeStream.subscribe(lineEvt => cb(lineEvt))\n  // socket.on(`drawing:${drawingId}`, (list)=>cb({lines:[list]}))\n  \n  socket.emit('subscribeForPublishLine', drawingId);\n}\n\nconst subscribeForAllPublishLine = (drawingId, cb)=>{\n  const lineStream = Rx.Observable.fromEventPattern(\n    h=>socket.on(`drawingAll:${drawingId}`, h),\n    h=>socket.off(`drawingAll:${drawingId}`, h)\n  );\n\n  const bufferedTimeStream = lineStream.bufferTime(100).map(lines=>({lines}))\n  bufferedTimeStream.subscribe(lineEvt => cb(lineEvt))\n  // socket.on(`drawing:${drawingId}`, (list)=>cb({lines:[list]}))\n  \n  socket.emit('subscribeForAllPublishLine', drawingId);\n}\n\nconst getDrawingById = (id,cb)=>{\n  socket.on('takeDrawing', info => cb(info))\n  socket.emit('getDrawingById',id);\n}\n\n\nexport {\n  // subscribeForDrawings,     \n  createDrawing,  publishLine,\n  subscribeForPublishLine,  getDrawingById, subscribeForDrawingsList,\n  subscribeForAllPublishLine\n}\n","import React,{useState} from 'react'\r\nimport {createDrawing} from \"./api\"\r\nexport default function NewAdd(props) {\r\n    const [isPublic, setPublic] = useState(0);\r\n    const [key, setKey] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        createDrawing({name, key});\r\n        setKey(\"\");\r\n        setName(\"\");\r\n        props.save()\r\n    }\r\n    return (\r\n        <div className=\"NewAdd\">\r\n            <div className=\"row\"><select name=\"\" id=\"\" className=\"type\" onChange={e=>{\r\n                setPublic(e.target.value)\r\n            }}>\r\n            <option value={0}>{\"Select Permissions\"}</option>\r\n                {[\r\n                    {text:\"Public can VIEW, EDIT AND DELETE\", value:1},\r\n                    {text:\"Public can VIEW, EDIT\", value:2},\r\n                    {text:\"Public can VIEW\", value:3},\r\n                    {text:\"Public can't do anything\", value:4},\r\n                    ].map(e=> <option value={e.value}>{e.text}</option>\r\n                    )}\r\n            </select>\r\n            {((name!=\"\"&&(key!=\"\"||isPublic==1)))?<button className=\"save\" onClick={handleSubmit}>SAVE</button>:null}\r\n            </div>\r\n            {(isPublic>1)?<input value={key} onChange={(e)=>setKey(e.target.value)} type=\"text\" placeholder=\"Password of Drawing\" className=\"key\"/>:null}\r\n           {isPublic!=0?<input value={name} onChange={(e)=>setName(e.target.value)} type=\"text\" placeholder=\"Name of Drawing\" className=\"name\"/>:null}\r\n           \r\n        </div>\r\n    )\r\n}\r\n","import React, {Component} from 'react'\r\nimport {createDrawing} from \"../api\"\r\nimport NewAdd from \"../NewAdd\"\r\n\r\nexport default class DrawingForm extends Component {\r\n    state = {\r\n        name: \"\",\r\n        isNew:false,\r\n        submitButtonTitle:\"NEW\"\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let id = localStorage.getItem(\"id\");\r\n        createDrawing({name: this.state.name, key:atob(id)});\r\n        this.setState({name: \"\"})\r\n    }\r\n    render() {\r\n        return (\r\n         \r\n            <div className=\"DrawingForm\">\r\n                <div className=\"form\">\r\n                    <input\r\n                        value={this.state.name}\r\n                        type=\"text\"\r\n                        placeholder=\"Search Drawing\"\r\n                        onChange={evt => this.setState({name: evt.target.value})}/>\r\n                    <input type=\"submit\" value={this.state.submitButtonTitle} onClick={e=>{\r\n                        this.setState({\r\n                            submitButtonTitle:!this.state.isNew?\"CANCEL\":\"NEW\",\r\n                            isNew:!this.state.isNew\r\n                        })\r\n                    }}/></div>\r\n                {this.state.isNew?<NewAdd save={()=>this.setState({isNew:false, submitButtonTitle:!this.state.isNew?\"CANCEL\":\"NEW\",})}/>:null}\r\n            </div>\r\n        \r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport {Link, Redirect} from \"react-router-dom\";\r\n\r\nimport {subscribeForDrawings, subscribeForDrawingsList,createDrawing} from \"../api\"\r\nimport axios from \"axios\"\r\nimport URL from \"../URL\"\r\n\r\nconst {log} = console\r\nexport default class DrawingList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            drawings: [],\r\n            temp: [],\r\n            key: \"\",\r\n            redirect: false,\r\n            query: \"\",\r\n            name: \"\",\r\n            isNew: false,\r\n            isAuth:true\r\n        }\r\n\r\n    }\r\n\r\n    getDrawing() {\r\n        subscribeForDrawingsList((drawing) => {\r\n            log('Getting List')\r\n            this.setState(prev => ({drawings: drawing, temp: drawing}))\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        this.getDrawing()\r\n        axios.post(`${URL}/auth/check`, {key:atob(localStorage.getItem(\"id\"))}).then(e=>{\r\n            const {data} = e\r\n            if(data.success){\r\n\r\n            }else{\r\n                this.setState({isAuth:false})\r\n            }\r\n        })  \r\n\r\n        // subscribeForDrawings((drawing) => {     log('drawing is added') log(drawing)\r\n        //    if(drawing.operationType==\"insert\"){ this.setState(prev => ({\r\n        // drawings: [drawing.fullDocument, ...prev.drawings]     }))     }\r\n        // if(drawing.operationType==\"delete\"){    this.setState(prev => ({\r\n        // drawings: prev.drawings.filter(e=>e._id!==drawing.documentKey._id)\r\n        // }))     } });\r\n\r\n    }\r\n\r\n    render() {\r\n        \r\n        const drawingList = this\r\n            .state\r\n            .temp\r\n            .map(drawing => (\r\n                <div\r\n                    className=\"card m-1 w-auto shadow-sm\"\r\n                    key={drawing._id}\r\n                    onClick={(evt) => {\r\n                    this\r\n                        .props\r\n                        .onSelectDrawing(drawing);\r\n                    log(drawing)\r\n                }}>\r\n                    {this.state.redirect &&< Redirect to = \"/auth\" />}\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{drawing.name}</h5>\r\n                        <Link\r\n                            className=\"card-text btn btn-info text-light\"\r\n                            to={`/drawings/${drawing._id}`}>{\"Draw\"}</Link>\r\n                    </div>\r\n                    <h6 className=\"card-footer text-dimmed\">{new Date(drawing.timestamp).toLocaleString()}</h6>\r\n                </div>\r\n            ))\r\n        return (\r\n            <div>\r\n                {this.state.isAuth?null:<Redirect to=\"/auth\" />}\r\n                <div className=\"row g-2 m-2\">\r\n                    <div className=\"col\">\r\n                        <div className=\"form-floating\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                id=\"floatingInputGrid\"\r\n                                placeholder=\"Search\"\r\n                                value={this.state.query}\r\n                                onChange={e => {\r\n                                const {value} = e.target;\r\n                                this.setState({\r\n                                    query: value,\r\n                                    temp: this\r\n                                        .state\r\n                                        .drawings\r\n                                        .filter(d => d.name.toLowerCase().indexOf(value) != -1)\r\n                                })\r\n                            }}/>\r\n                            <label for=\"floatingInputGrid\">Search</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-3 display-6 rounded\">\r\n                        <div className=\" bg-dark text-light rounded\" onClick={\r\n                            e=>{\r\n                                if(this.state.isNew){\r\n                                    createDrawing({name: this.state.name});\r\n                                    this.getDrawing();\r\n                                }\r\n                                this.setState({isNew:!this.state.isNew,name:\"\"})\r\n                            }\r\n                        }>{!this.state.isNew\r\n                                ? \"NEW\"\r\n                                : \"SAVE\"}</div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                {this.state.isNew&&<div className=\"row m-1\">\r\n                    <div className=\"col\">\r\n\r\n                        <div className=\"form-floating\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                id=\"floatingInputGrid\"\r\n                                placeholder=\"NAME\"\r\n                                value={this.state.name}\r\n                                onChange={e => {\r\n                                const {value} = e.target;\r\n                                this.setState({name: value})\r\n                            }}/>\r\n                            <label for=\"floatingInputGrid\">New Drawing Name</label>\r\n                        </div>\r\n                    </div>\r\n                </div>}\r\n\r\n                <div className=\"d-flex flex-wrap justify-content-center\">\r\n                    {drawingList.length\r\n                        ? drawingList\r\n                        : <h1>LOADING ...</h1>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component,useState} from 'react'\r\nimport Canvas from 'simple-react-canvas';\r\nimport {publishLine,subscribeForPublishLine,getDrawingById,subscribeForAllPublishLine} from \"../api\"\r\n\r\nimport axios from \"axios\"\r\nimport URL from \"../URL\"\r\n\r\nconst {log, table} = console\r\nexport default class Drawing extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            lines:[],\r\n            info:{name:\"\"},\r\n            brushColor:\"black\",\r\n            name:\"Loading....\",\r\n            isFound:false\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        \r\n        // log(this.props)\r\n        const id = window.location.href.split(\"/\").pop()\r\n        log(id)\r\n        axios.post(`${URL}/drawing/get`, {id}).then(e=>{\r\n            const {data} = e;\r\n            log(data)\r\n            if(data.success){\r\n                this.setState({isFound:true,name:data.name});\r\n                log(data)\r\n            }else{\r\n                this.setState({name:\"NOT FOUND\"})\r\n            }\r\n        })\r\n\r\n        subscribeForAllPublishLine(this.props.drawingId, (lineEvt)=>{\r\n            // log(lineEvt)\r\n            this.setState(prev=>{\r\n                return {lines:[...prev.lines, ...lineEvt.lines]}\r\n            })\r\n        })\r\n\r\n        subscribeForPublishLine(this.props.drawingId, (lineEvt)=>{\r\n            \r\n            this.setState(prev=>{\r\n                return {lines:[...prev.lines, ...lineEvt.lines]}\r\n            })\r\n        })\r\n\r\n        \r\n\r\n\r\n\r\n    }\r\n   \r\n    handleDraw = (line) => {\r\n        // log(line)\r\n        publishLine({drawingId: this.props.drawingId, ...line});\r\n    }\r\n    \r\n    render() {\r\n\r\n        return (<>\r\n                <h1>{this.state.name}</h1>\r\n             {this.state.isFound?<div className=\"Drawing\">\r\n                \r\n                    {/* <ColorBox onClick={color=>{this.setState({brushColor:color})}}/> */}\r\n                    <Canvas brushColor={this.state.brushColor} onDraw={this.handleDraw} drawingEnabled={true} lines={this.state.lines}/>\r\n                </div>:null}\r\n                </>\r\n                \r\n            )\r\n         \r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// Canvas.defaultProps = {\r\n//     brushColor: '#000000',\r\n//     lineWidth: 2,\r\n//     canvasStyle: {\r\n//       backgroundColor: '#FFFFFF',\r\n//       cursor: 'pointer'\r\n//     },\r\n//     drawingEnabled: false,\r\n//     lines: []\r\n//   };\r\n\r\n","const initalState = {\r\n    key:\"\"\r\n}\r\nconst authReducer = (state = initalState, action) => {\r\n\r\n    switch (action.type) {\r\n      \r\n      default: return state;\r\n    }\r\n\r\n}\r\n\r\n  export default authReducer","import {subscribeForDrawings,subscribeForDrawingsList} from \"../api\"\r\n\r\nconst {log} = console\r\n\r\nconst initState = {\r\n    list:[]\r\n\r\n}\r\n\r\nconst drawingListGetter = (state, action)=>{\r\n    \r\n}\r\n\r\nconst drawingReducer = (state=initState, action)=>{\r\n    const {data} = action;\r\n    switch(action.type){\r\n        case 'GET_DRAWING_LIST':\r\n            return new Promise((res, rej)=>{\r\n                subscribeForDrawingsList((drawing) => {\r\n                    log('GET_DRAWING_LIST '+drawing.length);\r\n                    log(state.list)\r\n                   res( {...state, list:drawing})\r\n                    \r\n                })\r\n            })\r\n        break;\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default drawingReducer","import {combineReducers} from \"redux\"\r\nimport auth from \"./authReducer\"\r\nimport drawing from \"./drawingReducer\"\r\n\r\nexport default combineReducers({auth,drawing})","import {createStore,applyMiddleware} from \"redux\"\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from \"./index\"\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(thunk)\r\n  );\r\n\r\nexport default store;","import React, { Component } from 'react'\r\nimport pen from \"../pen.svg\"\r\nimport axios from \"axios\"\r\nimport {Redirect} from 'react-router-dom'\r\nimport URL from \"../URL\"\r\n\r\nimport store from \"./store\"\r\n\r\nexport default class Auth extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            email:\"\",\r\n            password:\"\",\r\n            success:false\r\n        }\r\n\r\n    }\r\n    auth(type){\r\n        // type : ['signin', 'signup']\r\n        const {email, password} = this.state\r\n        axios.post(`${URL}/auth/${type}`, {email, password}).then(e=>{\r\n            const {data} = e\r\n            if(data.success){\r\n                localStorage.setItem(\"id\",btoa(data.id));\r\n                this.setState({success:true})\r\n                window.location.pathname = '/dashboard'\r\n                // console.log(data)\r\n            }else{\r\n                alert(data.message)\r\n            }\r\n        });\r\n        \r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container h-100 d-flex align-items-center\">\r\n            {/* {this.state.success&&<Redirect to=\"/dashboard\" />} */}\r\n        <form className=\"from\" style={{width: \"100%\", maxWidth: \"330px\", padding: \"15px\",margin: \"auto\" }}\r\n            onSubmit={e=>e.preventDefault()}\r\n        >\r\n      <img className=\"mb-4\" src={pen} alt=\"\" width=\"72\" height=\"72\" />\r\n      <h1 className=\"h3 mb-3 font-weight-normal\">Please sign in/up</h1>\r\n  \r\n      <input onChange={e=>this.setState({email:e.target.value})} value={this.state.email} name=\"email\" type=\"email\" id=\"inputEmail\" className=\"form-control mb-2\" placeholder=\"Email address\" required autoFocus/>\r\n    \r\n      <input onChange={e=>this.setState({password:e.target.value})} value={this.state.password} name=\"password\" type=\"password\" id=\"inputPassword\" className=\"form-control\" placeholder=\"Password\" required />\r\n     \r\n      <button onClick={e=>this.auth(\"signin\")} className=\"btn btn-lg btn-primary btn-block mt-2\" type=\"submit\">Sign in</button>\r\n\r\n      <button onClick={e=>this.auth(\"signup\")} className=\"btn btn-lg btn-info btn-block mt-2 ms-2 text-light\" type=\"submit\">Sign up</button>\r\n      {/* <p classNameName=\"mt-5 mb-3 text-muted\">© 2017-2018</p> */}\r\n    </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export default {\r\n    TITLE:\"LineDraw\"\r\n}","import React from 'react';\n\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\n\nimport './App.css';\n\nimport DrawingForm from \"./components/DrawingForm\"\nimport DrawingList from \"./components/DrawingList\"\nimport Drawing from \"./components/Drawing\"\nimport Auth from \"./components/Auth\"\n\nimport store from \"./Reducer/store\"\n\nimport db from \"./db\"\n\nconst {log} = console\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedDrawing: {id:\"\",name:\"\"},\n            title:db.TITLE\n        }\n\n    }\n    componentWillMount(){\n        this.setState({title:db.TITLE});\n        log(store.getState())\n    }\n    \n\n    selectDrawing = (drawing) => {\n\n        this.setState({selectedDrawing: drawing})\n\n    }\n\n    render() {\n\n        return <Router>\n            <div className=\"App\">\n\n\n                <Switch>\n                <Route exact path=\"/\">\n                    <h1>homePage</h1>\n                    <Link to=\"/auth\" />\n                </Route>\n                <Route path=\"/dashboard\" >\n                    <h1>{this.state.title}</h1>\n                    {/* <DrawingForm/> */}\n                    < DrawingList onSelectDrawing = {e => {this.selectDrawing(e)}} />\n                </Route>\n                <Route path=\"/auth\">\n                    <Auth />\n                </Route>\n                \n                <Route path=\"/drawings/:drawingId\" render={e=>{\n                        return <>\n                        <h1>{this.state.selectedDrawing.name}</h1>\n                        <Drawing drawingId={e.match.params.drawingId} drawing={this.state.selectedDrawing}/>\n                        </>\n                    }}>\n                \n                        \n                </Route>\n\n                    \n                </Switch>\n\n            </div>\n        </Router>\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}