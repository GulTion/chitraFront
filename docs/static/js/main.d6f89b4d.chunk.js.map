{"version":3,"sources":["api.js","NewAdd.jsx","DrawingForm.jsx","DrawingList.jsx","Drawing.jsx","db.js","App.js","serviceWorker.js","index.js"],"names":["socket","console","log","openSocket","createDrawing","name","key","emit","publishLine","line","NewAdd","props","useState","isPublic","setPublic","setKey","setName","className","id","onChange","e","target","value","text","map","onClick","preventDefault","save","type","placeholder","DrawingForm","state","isNew","submitButtonTitle","handleSubmit","setState","this","evt","Component","TimeAgo","addDefaultLocale","en","DrawingList","drawings","cb","drawing","prev","on","subscribeForDrawings","operationType","fullDocument","filter","_id","documentKey","drawingList","onSelectDrawing","to","Date","timestamp","toLocaleString","length","Drawing","table","handleDraw","drawingId","lines","info","brushColor","lineEvt","Rx","Observable","fromEventPattern","h","off","bufferTime","subscribe","subscribeForPublishLine","getDrawingById","window","location","pathname","split","onDraw","drawingEnabled","TITLE","App","selectDrawing","selectedDrawing","title","db","exact","path","render","match","params","React","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d6f89b4d.chunk.js","sourcesContent":["import openSocket from \"socket.io-client\";\nimport Rx from 'rxjs/Rx';\n\n\nconst URL = \"https://chitraBackend.gultion.repl.co/\"\nconst {log} = console;\nconst socket = openSocket(URL);\n\nconst subscribeForDrawings = (cb) => {\n\n    socket.on('drawing', drawing => cb(drawing));\n    socket.emit('subscribeForDrawings');\n}\n\nconst subscribeForDrawingsList = (cb) =>{\n  socket.on('drawingList', drawing => cb(drawing));\n  socket.emit(\"subscribeForDrawingList\")\n}\n\nconst createDrawing = ({name,key}) => {\n    socket.emit('createDrawing', {name,key})\n}\n\nconst publishLine=(line)=>{\n  socket.emit('publishLine', line)\n}\n\nconst subscribeForPublishLine = (drawingId, cb)=>{\n  const lineStream = Rx.Observable.fromEventPattern(\n    h=>socket.on(`drawing:${drawingId}`, h),\n    h=>socket.off(`drawing:${drawingId}`, h)\n  );\n\n  const bufferedTimeStream = lineStream.bufferTime(100).map(lines=>({lines}))\n  bufferedTimeStream.subscribe(lineEvt => cb(lineEvt))\n  // socket.on(`drawing:${drawingId}`, (list)=>cb({lines:[list]}))\n  \n  socket.emit('subscribeForPublishLine', drawingId);\n}\n\nconst subscribeForAllPublishLine = (drawingId, cb)=>{\n  const lineStream = Rx.Observable.fromEventPattern(\n    h=>socket.on(`drawingAll:${drawingId}`, h),\n    h=>socket.off(`drawingAll:${drawingId}`, h)\n  );\n\n  const bufferedTimeStream = lineStream.bufferTime(100).map(lines=>({lines}))\n  bufferedTimeStream.subscribe(lineEvt => cb(lineEvt))\n  // socket.on(`drawing:${drawingId}`, (list)=>cb({lines:[list]}))\n  \n  socket.emit('subscribeForAllPublishLine', drawingId);\n}\n\nconst getDrawingById = (id,cb)=>{\n  socket.on('takeDrawing', info => cb(info))\n  socket.emit('getDrawingById',id);\n}\n\n\nexport {\n  subscribeForDrawings,     createDrawing,  publishLine,\n  subscribeForPublishLine,  getDrawingById, subscribeForDrawingsList,\n  subscribeForAllPublishLine\n}\n","import React,{useState} from 'react'\nimport {createDrawing} from \"./api\"\nexport default function NewAdd(props) {\n    const [isPublic, setPublic] = useState(0);\n    const [key, setKey] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        createDrawing({name, key});\n        setKey(\"\");\n        setName(\"\");\n        props.save()\n    }\n    return (\n        <div className=\"NewAdd\">\n            <div className=\"row\"><select name=\"\" id=\"\" className=\"type\" onChange={e=>{\n                setPublic(e.target.value)\n            }}>\n            <option value={0}>{\"Select Permissions\"}</option>\n                {[\n                    {text:\"Public can VIEW, EDIT AND DELETE\", value:1},\n                    {text:\"Public can VIEW, EDIT\", value:2},\n                    {text:\"Public can VIEW\", value:3},\n                    {text:\"Public can't do anything\", value:4},\n                    ].map(e=> <option value={e.value}>{e.text}</option>\n                    )}\n            </select>\n            {((name!=\"\"&&(key!=\"\"||isPublic==1)))?<button className=\"save\" onClick={handleSubmit}>SAVE</button>:null}\n            </div>\n            {(isPublic>1)?<input value={key} onChange={(e)=>setKey(e.target.value)} type=\"text\" placeholder=\"Password of Drawing\" className=\"key\"/>:null}\n           {isPublic!=0?<input value={name} onChange={(e)=>setName(e.target.value)} type=\"text\" placeholder=\"Name of Drawing\" className=\"name\"/>:null}\n           \n        </div>\n    )\n}\n","import React, {Component} from 'react'\nimport {createDrawing} from \"./api\"\nimport NewAdd from \"./NewAdd\"\n\nexport default class DrawingForm extends Component {\n    state = {\n        name: \"\",\n        isNew:false,\n        submitButtonTitle:\"NEW\"\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        createDrawing({name: this.state.name});\n        this.setState({name: \"\"})\n    }\n    render() {\n        return (\n         \n            <div className=\"DrawingForm\">\n                <div className=\"form\">\n                    <input\n                        value={this.state.name}\n                        type=\"text\"\n                        placeholder=\"Search Drawing\"\n                        onChange={evt => this.setState({name: evt.target.value})}/>\n                    <input type=\"submit\" value={this.state.submitButtonTitle} onClick={e=>{\n                        this.setState({\n                            submitButtonTitle:!this.state.isNew?\"CANCEL\":\"NEW\",\n                            isNew:!this.state.isNew\n                        })\n                    }}/></div>\n                {this.state.isNew?<NewAdd save={()=>this.setState({isNew:false, submitButtonTitle:!this.state.isNew?\"CANCEL\":\"NEW\",})}/>:null}\n            </div>\n        \n        )\n    }\n}\n","import React, {Component} from 'react'\nimport {Link} from \"react-router-dom\";\n\nimport {subscribeForDrawings,subscribeForDrawingsList} from \"./api\"\nimport TimeAgo from \"javascript-time-ago\"\n\nimport en from \"javascript-time-ago/locale/en\"\n\nTimeAgo.addDefaultLocale(en)\nconst timeago = new TimeAgo('en-US')\n\nconst {log} = console\nexport default class DrawingList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            drawings: []\n        }\n        \n    }\n\n    componentDidMount(){\n        subscribeForDrawingsList((drawing) => {\n            log('Getting List')\n            this.setState(prev => ({\n                drawings: drawing\n            }))\n        })\n\n        subscribeForDrawings((drawing) => {\n            log('drawing is added')\n            log(drawing)\n            if(drawing.operationType==\"insert\"){\n                 this.setState(prev => ({\n                drawings: [drawing.fullDocument, ...prev.drawings]\n            }))\n            }\n            if(drawing.operationType==\"delete\"){\n                this.setState(prev => ({\n                    drawings: prev.drawings.filter(e=>e._id!==drawing.documentKey._id)\n                }))\n            }\n           \n        });\n       \n    }\n\n    \n    render() {\n        const drawingList = this\n            .state\n            .drawings\n            .map(drawing => (\n                <div className=\"card m-1 w-auto shadow-sm\" key={drawing._id} onClick={(evt)=>{this.props.onSelectDrawing(drawing);log(drawing)}}>\n\n                    <div className=\"card-body\">\n                    <h5 className=\"card-title\">{drawing.name}</h5>\n                    <Link className=\"card-text btn btn-info text-light\" to={`/${drawing._id}`}>{\"Draw\"}</Link>\n                    </div>\n                    <h6 className=\"card-footer text-dimmed\">{new Date(drawing.timestamp).toLocaleString()}</h6>\n                    </div>\n            ))\n        return (\n            <div className=\"d-flex flex-wrap justify-content-center\">\n              { drawingList.length?drawingList:<h1>LOADING ...</h1>}\n            </div>\n        )\n    }\n}\n","import React, {Component,useState} from 'react'\nimport Canvas from 'simple-react-canvas';\nimport {publishLine,subscribeForPublishLine,getDrawingById,subscribeForAllPublishLine} from \"./api\"\n\nconst {log, table} = console\nexport default class Drawing extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            lines:[],\n            info:{name:\"\"},\n            brushColor:\"black\"\n        }\n    }\n    componentDidMount(){\n        // log(this.props)\n        subscribeForAllPublishLine(this.props.drawingId, (lineEvt)=>{\n            // log(lineEvt)\n            this.setState(prev=>{\n                return {lines:[...prev.lines, ...lineEvt.lines]}\n            })\n        })\n\n        subscribeForPublishLine(this.props.drawingId, (lineEvt)=>{\n            \n            this.setState(prev=>{\n                return {lines:[...prev.lines, ...lineEvt.lines]}\n            })\n        })\n\n        getDrawingById(window.location.pathname.split('/')[1],(info)=>{\n            log(info)\n            log(window.location.pathname.split('/')[1])\n            this.setState({\n                info:info\n            })\n        });\n\n\n\n    }\n   \n    handleDraw = (line) => {\n        // log(line)\n        publishLine({drawingId: this.props.drawingId, ...line});\n    }\n    \n    render() {\n\n        return (this.props.drawing)\n            ? (\n              <div className=\"Drawing\">\n                    {this.state.info.name}\n                    {/* <ColorBox onClick={color=>{this.setState({brushColor:color})}}/> */}\n                    <Canvas brushColor={this.state.brushColor} onDraw={this.handleDraw} drawingEnabled={true} lines={this.state.lines}/>\n                </div>\n                \n            )\n            : null;\n    }\n}\n\n\n\nfunction ColorBox({onClick}) {\n    const [colorList,setList] = useState([\"#ff0000\", \"#ff00ff\", \"#f12ff1\"])\n    return (\n        <div className=\"ColorBox\">\n            <div className=\"colorList\">\n                {colorList.map(e=>{\n                    return <div onClick={k=>onClick(e)} className=\"color\" key={e} style={{background:e}}></div>\n                })}\n            </div>\n        </div>\n    )\n}\n\n// Canvas.defaultProps = {\n//     brushColor: '#000000',\n//     lineWidth: 2,\n//     canvasStyle: {\n//       backgroundColor: '#FFFFFF',\n//       cursor: 'pointer'\n//     },\n//     drawingEnabled: false,\n//     lines: []\n//   };\n\n","export default {\n    TITLE:\"LineDraw\"\n}","import React from 'react';\n\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\n\nimport './App.css';\n\nimport DrawingForm from \"./DrawingForm\"\nimport DrawingList from \"./DrawingList\"\nimport Drawing from \"./Drawing\"\nimport db from \"./db\"\n\nconst {log} = console\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedDrawing: {id:\"\",name:\"\"},\n            title:db.TITLE\n        }\n\n    }\n    componentWillMount(){\n        this.setState({title:db.TITLE})\n    }\n    \n\n    selectDrawing = (drawing) => {\n\n        this.setState({selectedDrawing: drawing})\n\n    }\n\n    render() {\n\n        return <Router>\n            <div className=\"App\">\n\n\n                <Switch>\n                <Route exact path=\"/\" >\n                    <h1>{this.state.title}</h1>\n                    <DrawingForm/>\n                    < DrawingList onSelectDrawing = {e => {this.selectDrawing(e)}} />\n                </Route>\n                \n                <Route path=\"/:drawingId\" render={e=>{\n                        return <>\n                        <h1>{this.state.selectedDrawing.name}</h1>\n                        <Drawing drawingId={e.match.params.drawingId} drawing={this.state.selectedDrawing}/>\n                        </>\n                    }}>\n                \n                        \n                </Route>\n\n                    \n                </Switch>\n\n            </div>\n        </Router>\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}